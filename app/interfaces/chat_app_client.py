import inspect
import logging
import os
import asyncio
import traceback
from pathlib import Path

from mcp.client.sse import sse_client
from mcp.client.stdio import stdio_client, StdioServerParameters
from mcp import ClientSession, types
import json
import streamlit as st
from mcp.client.websocket import websocket_client

from core import call_llm, get_settings


def create_system_prompt() -> str:
    return """–¢—ã - AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å Finam TradeAPI.

–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ, –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏–ª–∏ —Ö–æ—á–µ—Ç —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:
1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω—É–∂–Ω—ã–π API endpoint
2. –£–∫–∞–∂–∏ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: API_REQUEST: METHOD /path
3. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏—Ö –∏ –¥–∞–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:
- GET /v1/instruments/{symbol}/quotes/latest - –∫–æ—Ç–∏—Ä–æ–≤–∫–∞
- GET /v1/instruments/{symbol}/orderbook - —Å—Ç–∞–∫–∞–Ω
- GET /v1/instruments/{symbol}/bars - —Å–≤–µ—á–∏
- GET /v1/accounts/{account_id} - —Å—á–µ—Ç –∏ –ø–æ–∑–∏—Ü–∏–∏
- GET /v1/accounts/{account_id}/orders - –æ—Ä–¥–µ—Ä–∞
- POST /v1/accounts/{account_id}/orders - —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä
- DELETE /v1/accounts/{account_id}/orders/{order_id} - –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""

def extract_api_request(text: str) -> tuple[str | None, str | None]:
    if "API_REQUEST:" not in text:
        return None, None
    lines = text.split("\n")
    for line in lines:
        if line.strip().startswith("API_REQUEST:"):
            request = line.replace("API_REQUEST:", "").strip()
            parts = request.split(maxsplit=1)
            if len(parts) == 2:
                return parts[0], parts[1]
    return None, None

def _to_schema(s):
    if s is None:
        return {"type": "object", "properties": {}}
    if hasattr(s, "model_dump"):
        return s.model_dump()
    return s

async def run_agent_async(user_query: str):
    url = os.getenv("MCP_SERVER_URL", "http://finam-mcp-server:8010/sse")
    async with sse_client(url) as (read, write):
        async with ClientSession(read, write) as session:
            await session.initialize()

            tools_list = await session.list_tools()
            openai_tools = [{
                "type": "function",
                "function": {
                    "name": t.name,
                    "description": t.description or "",
                    "parameters": _to_schema(t.inputSchema)
                }
            } for t in tools_list.tools]


            messages = [
                {"role": "system", "content": create_system_prompt()},
                {"role": "user", "content": user_query},
            ]
            while True:
                resp = call_llm(
                    messages=messages,
                    temperature=0.2,
                    tools=openai_tools,
                    tool_choice="auto",
                )
                msg = resp["choices"][0]["message"]

                if not msg.get("tool_calls"):
                    return msg.get("content", "")


                messages.append({"role": "assistant", "tool_calls": msg["tool_calls"]})
                for tc in msg["tool_calls"]:
                    name = tc["function"]["name"]
                    args_json = tc["function"].get("arguments") or "{}"
                    try:
                        args = json.loads(args_json)
                    except Exception:
                        args = {}

                    result = await session.call_tool(name, args)

                    content_parts = getattr(result, "content", []) or []
                    text = "\n".join(
                        p.text for p in content_parts if getattr(p, "type", "") == "text"
                    ) or json.dumps(getattr(result, "result", {}), ensure_ascii=False)

                    # messages.append({
                    #     "role": "tool",
                    #     "tool_call_id": tc["id"],
                    #     "content": text,
                    # })

# async def run_agent_async(user_query: str):
#     url = os.getenv("MCP_SERVER_URL", "http://finam-mcp-server:8010/sse")
#     from mcp.client.sse import sse_client
#
#     async with sse_client(url) as (read, write):
#         async with ClientSession(read, write) as session:
#             await session.initialize()
#             tools = await session.list_tools()
#             response = call_llm(user_query, temperature=0.3, tools=tools, tool_choice=None)
#             return response["choices"][0]["message"]["content"]

def run_agent(user_query: str):
    loop = asyncio.new_event_loop()
    try:
        return loop.run_until_complete(run_agent_async(user_query))
    finally:
        loop.close()

def main():
    st.set_page_config(page_title="AI –¢—Ä–µ–π–¥–µ—Ä (Finam)", page_icon="ü§ñ", layout="wide")
    st.title("ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¢—Ä–µ–π–¥–µ—Ä–∞")
    st.caption("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Finam TradeAPI")
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings = get_settings()
        st.info(f"**–ú–æ–¥–µ–ª—å:** {settings.openrouter_model}")
        with st.expander("üîë Finam API", expanded=False):
            api_token = st.text_input("Access Token", type="password", help="–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ Finam TradeAPI (–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ FINAM_ACCESS_TOKEN)")
            api_base_url = st.text_input("API Base URL", value="https://api.finam.ru", help="–ë–∞–∑–æ–≤—ã–π URL API")
        account_id = st.text_input("ID —Å—á–µ—Ç–∞", value="", help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.messages = []
            st.rerun()
        st.markdown("---")
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        st.markdown("""
               - –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞?
               - –ü–æ–∫–∞–∂–∏ –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
               - –ß—Ç–æ –≤ —Å—Ç–∞–∫–∞–Ω–µ –ø–æ –ì–∞–∑–ø—Ä–æ–º—É?
               - –ü–æ–∫–∞–∂–∏ —Å–≤–µ—á–∏ YNDX –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏
               - –ö–∞–∫–∏–µ —É –º–µ–Ω—è –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?
               - –î–µ—Ç–∞–ª–∏ –º–æ–µ–π —Å–µ—Å—Å–∏–∏
               """)
    if prompt := st.chat_input("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        with st.chat_message("assistant"), st.spinner("–î—É–º–∞—é..."):
            try:
                response = run_agent(prompt)
                st.write(response)
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
